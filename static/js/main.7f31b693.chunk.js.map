{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlfor","TextForm","useState","text","setText","style","color","heading","rows","value","onChange","event","target","placeholder","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","about","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7f31b693.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link\" to=\"/about\">{props.about}</Link> */}\r\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">{props.about}</Link> */}\r\n                        {/* </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light'?'dark': 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable {props.mode === 'light'?'Dark': 'Light'} Mode</label>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired, \r\n    about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    about: 'About'\r\n}\r\n","import React, {useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n\r\n    const handleUpClick = () => {\r\n        //console.log(\"Uppercase was clicked:\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Texts cleared!\", \"success\");\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Texts copied to clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleRemoveExtraSpaceClick = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces has been removed!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        //console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white': 'black'}}>\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value = {text} onChange={handleOnChange} placeholder=\"Enter Text Here\" style={{backgroundColor: props.mode === 'dark'?'black': 'white', color: props.mode === 'dark'?'white': 'black'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopyClick}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleRemoveExtraSpaceClick}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-2\" style={{color: props.mode === 'dark'?'white': 'black'}}>\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} minutes to read.</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the text box.\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {/* <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} */}\r\n            <strong>{capitalize(props.alert.msg)}</strong>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport React, { useState } from 'react'\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const toggleMode = () =>{\n    if (mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode has been enabled\", \"primary\");\n      // document.title = 'TextUtils - Home';\n      // setInterval(() => {\n      //   document.title = 'TextUtils - Dark Mode';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'TextUtils - dfgdfg Mode';\n      // }, 1500);\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title = \"TextUtils\" mode={mode} toggleMode = {toggleMode}/>\n        <Alert alert = {alert}/>\n        <div className=\"container my-3\">\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About/>\n            </Route>\n            <Route exact path =\"/\">\n              <TextForm heading = \"Enter a text to analyze\" mode = {mode} showAlert = {showAlert}/>\n            </Route>\n          </Switch> */}\n        </div>\n        <TextForm heading = \"Enter a text to analyze\" mode = {mode} showAlert = {showAlert}/>\n      {/* </Router> */}\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}